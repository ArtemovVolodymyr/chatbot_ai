# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ —Ç–∞ –º–æ–¥—É–ª—ñ
import os
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)
from dotenv import load_dotenv

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ –ª–æ–∫–∞–ª—å–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤
from db import (
    get_connection, init_db, add_feedback, get_feedback,
    save_course_to_db, get_saved_courses
)
from cisco_api import get_courses, format_courses
from handlers.register import register, get_name, get_email, get_password, NAME, EMAIL, PASSWORD
from handlers.login import login, get_login_email, check_login, LOGIN_EMAIL, LOGIN_PASSWORD
from handlers.guest import guest

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è —Å—Ç–∞–Ω—ñ–≤ —É ConversationHandler
ASK_INTEREST, ASK_LEVEL, FEEDBACK = range(3)
SAVE_COURSE_SELECTION = range(3, 4)[0]
ADMIN_ID = 397447568  # ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
main_menu_keyboard = ReplyKeyboardMarkup(
    [["üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó", "‚úâÔ∏è –ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫"],
     ["üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", "üì• –í—ñ–¥–≥—É–∫–∏"],
     ["üíù –ó–±–µ—Ä–µ–≥—Ç–∏ –∫—É—Ä—Å", "üìÇ –ú–æ—ó –∫—É—Ä—Å–∏"],
     ["üîÑ –ù–∞ –≥–æ–ª–æ–≤–Ω—É"]],
    resize_keyboard=True
)

# –ü–æ—á–∞—Ç–∫–æ–≤–µ –º–µ–Ω—é
start_keyboard = ReplyKeyboardMarkup(
    [["–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è", "–£–≤—ñ–π—Ç–∏", "–£–≤—ñ–π—Ç–∏ —è–∫ –≥—ñ—Å—Ç—å"]],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í—ñ—Ç–∞—î–º–æ! –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è:",
        reply_markup=start_keyboard
    )

# –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–µ–º
def get_unique_topics():
    return ["–ë–µ–∑–ø–µ–∫–∞", "–ú–µ—Ä–µ–∂—ñ", "–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è", "DevNet", "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è", "Python"]

# –ó–∞–ø–∏—Ç —ñ–Ω—Ç–µ—Ä–µ—Å—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def recommend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    topics = get_unique_topics()
    keyboard = [topics[i:i + 3] for i in range(0, len(topics), 3)]
    keyboard.append(['üîô –ù–∞–∑–∞–¥', 'üîÑ –ù–∞ –≥–æ–ª–æ–≤–Ω—É'])
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        "–Ø–∫—ñ —Ç–µ–º–∏ –≤–∞—Å —Ü—ñ–∫–∞–≤–ª—è—Ç—å? –í–∏–±–µ—Ä—ñ—Ç—å –∑ –∫–Ω–æ–ø–æ–∫ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—é —Ç–µ–º—É:",
        reply_markup=reply_markup
    )
    return ASK_INTEREST

# –ó–∞–ø–∏—Ç —Ä—ñ–≤–Ω—è –∑–Ω–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def ask_level(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text in ['üîô –ù–∞–∑–∞–¥', 'üîÑ –ù–∞ –≥–æ–ª–æ–≤–Ω—É']:
        await show_main_menu(update, context)
        return ConversationHandler.END

    context.user_data["interest"] = text
    level_keyboard = ReplyKeyboardMarkup(
        [["–ü–æ—á–∞—Ç–∫–æ–≤–∏–π", "–°–µ—Ä–µ–¥–Ω—ñ–π", "–ü—Ä–æ—Å—É–Ω—É—Ç–∏–π"],
         ["üîô –ù–∞–∑–∞–¥", "üîÑ –ù–∞ –≥–æ–ª–æ–≤–Ω—É"]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await update.message.reply_text(
        "–Ø–∫–∏–π —É –≤–∞—Å —Ä—ñ–≤–µ–Ω—å –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏? –û–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É:",
        reply_markup=level_keyboard
    )
    return ASK_LEVEL

# –ü–æ–∫–∞–∑—É—î —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –∫—É—Ä—Å–∏
async def show_courses(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text in ["üîô –ù–∞–∑–∞–¥", "üîÑ –ù–∞ –≥–æ–ª–æ–≤–Ω—É"]:
        await show_main_menu(update, context)
        return ConversationHandler.END

    level = text
    interest = context.user_data.get("interest", "")
    user_id = update.effective_user.id
    username = update.effective_user.username or ""

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–µ—Å—É —Ç–∞ —Ä—ñ–≤–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—É
    try:
        with get_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    INSERT INTO users (telegram_id, username, interest, level)
                    VALUES (%s, %s, %s, %s)
                    ON CONFLICT (telegram_id)
                    DO UPDATE SET interest = EXCLUDED.interest, level = EXCLUDED.level;
                """, (user_id, username, interest, level))
                conn.commit()
    except Exception:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É—Ä—Å—ñ–≤ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ó—Ö —É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
    courses = get_courses(interest=interest, level=level)
    context.user_data['last_courses'] = courses

    if courses:
        msg = format_courses(courses, interest=interest, level=level)
        await update.message.reply_text(msg, parse_mode="Markdown", reply_markup=main_menu_keyboard)
    else:
        await update.message.reply_text(
            "üîç –ù–∞ –∂–∞–ª—å, –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫—É—Ä—Å—ñ–≤ —É –±–∞–∑—ñ Cisco.\nüîé –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ —Å—Ö–æ–∂—ñ –∫—É—Ä—Å–∏...",
            reply_markup=main_menu_keyboard
        )
        await update.message.reply_text(
            "‚ö†Ô∏è AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–º—ñ–Ω—ñ—Ç—å —Ç–µ–º—É.",
            reply_markup=main_menu_keyboard
        )

    return ConversationHandler.END

# –ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–±—ñ—Ä –∫—É—Ä—Å—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
async def save_course(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    courses = context.user_data.get("last_courses")
    if not courses:
        await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º–∞–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –∫—É—Ä—Å—ñ–≤, —â–æ–± —ó—Ö –∑–±–µ—Ä–µ–≥—Ç–∏.", reply_markup=main_menu_keyboard)
        return ConversationHandler.END

    keyboard = [[course['title']] for course in courses]
    keyboard.append(['üîô –ù–∞–∑–∞–¥'])
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –∑–±–µ—Ä–µ–≥—Ç–∏:",
        reply_markup=reply_markup
    )
    return SAVE_COURSE_SELECTION

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –∫—É—Ä—Å—É
async def save_course_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    selected_title = update.message.text
    if selected_title == 'üîô –ù–∞–∑–∞–¥':
        await update.message.reply_text("–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu_keyboard)
        return ConversationHandler.END

    courses = context.user_data.get('last_courses', [])
    course_to_save = next((c for c in courses if c['title'] == selected_title), None)

    if not course_to_save:
        await update.message.reply_text("–ö—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=main_menu_keyboard)
        return ConversationHandler.END

    success = save_course_to_db(user_id, course_to_save)
    if success:
        await update.message.reply_text(f"‚úÖ –ö—É—Ä—Å '{selected_title}' —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.", reply_markup=main_menu_keyboard)
    else:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫—É—Ä—Å—É '{selected_title}'.", reply_markup=main_menu_keyboard)

    return ConversationHandler.END

# –ü–µ—Ä–µ–≥–ª—è–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤
async def view_saved_courses(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    saved = get_saved_courses(user_id)
    if not saved:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤.", reply_markup=main_menu_keyboard)
        return

    msg = "üíæ –í–∞—à—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∫—É—Ä—Å–∏:\n\n"
    for c in saved:
        created_at = c['created_at'].strftime('%Y-%m-%d') if c['created_at'] else '‚Äî'
        msg += (
            f"üìò {c['course_title']}\n"
            f"üìù {c['course_description']}\n"
            f"–î–∞—Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {created_at}\n\n"
        )
    await update.message.reply_text(msg.strip(), reply_markup=main_menu_keyboard)

# –ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
        reply_markup=main_menu_keyboard
    )

# –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.", reply_markup=main_menu_keyboard)
    return ConversationHandler.END

# –ü–µ—Ä–µ–≥–ª—è–¥ —É—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
async def get_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚ùå –í–∏–±–∞—á—Ç–µ, —É –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.", reply_markup=main_menu_keyboard)
        return

    try:
        with get_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT telegram_id, username, full_name, email FROM users ORDER BY telegram_id;")
                users = cur.fetchall()
    except Exception as e:
        logger.error(f"Error fetching users: {e}")
        users = []

    if not users:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.", reply_markup=main_menu_keyboard)
        return

    msg = "üë• –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:\n\n"
    for u in users:
        msg += (
            f"ID: {u['telegram_id']}\n"
            f"–Ü–º'—è: {u.get('full_name', '‚Äî')}\n"
            f"–ù—ñ–∫–Ω–µ–π–º: @{u.get('username', '‚Äî')}\n"
            f"Email: {u.get('email', '‚Äî')}\n\n"
        )
    await update.message.reply_text(msg.strip(), reply_markup=main_menu_keyboard)

# –í–≤—ñ–¥ —Ç–µ–∫—Å—Ç—É –≤—ñ–¥–≥—É–∫—É
async def feedback_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤—ñ–¥–≥—É–∫ –∞–±–æ /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è:",
        reply_markup=ReplyKeyboardMarkup([["/cancel"]], resize_keyboard=True, one_time_keyboard=True)
    )
    return FEEDBACK

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É
async def feedback_save(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "/cancel":
        await update.message.reply_text("–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu_keyboard)
        return ConversationHandler.END

    user_id = update.effective_user.id
    try:
        add_feedback(user_id, text)
    except Exception as e:
        logger.error(f"Error adding feedback: {e}")
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤—ñ–¥–≥—É–∫—É.", reply_markup=main_menu_keyboard)
        return ConversationHandler.END

    await update.message.reply_text("–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫!", reply_markup=main_menu_keyboard)
    return ConversationHandler.END

# –ü–µ—Ä–µ–≥–ª—è–¥ —É—Å—ñ—Ö –≤—ñ–¥–≥—É–∫—ñ–≤
async def view_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    try:
        feedbacks = get_feedback()
    except Exception as e:
        logger.error(f"Error getting feedbacks: {e}")
        feedbacks = []

    if not feedbacks:
        await update.message.reply_text("–í—ñ–¥–≥—É–∫—ñ–≤ —â–µ –Ω–µ–º–∞—î.", reply_markup=main_menu_keyboard)
        return

    msg = "üì¢ –í—ñ–¥–≥—É–∫–∏:\n\n"
    for fb in feedbacks:
        if user_id == ADMIN_ID:
            try:
                with get_connection() as conn:
                    with conn.cursor() as cur:
                        cur.execute("SELECT username, full_name FROM users WHERE telegram_id = %s;", (fb['user_id'],))
                        user = cur.fetchone()
                author = user['full_name'] or user['username'] if user else "–ù–µ –≤—ñ–¥–æ–º–æ"
            except Exception as e:
                logger.error(f"Error fetching author info: {e}")
                author = "–ù–µ –≤—ñ–¥–æ–º–æ"
            msg += f"–í—ñ–¥: {author}\n"
        else:
            msg += "–í—ñ–¥–≥—É–∫:\n"
        msg += f"{fb['message']}\n\n"

    await update.message.reply_text(msg.strip(), reply_markup=main_menu_keyboard)

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
def main():
    init_db()  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("^üîÑ –ù–∞ –≥–æ–ª–æ–≤–Ω—É$"), show_main_menu))

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
    register_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è$"), register)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_email)],
            PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_password)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(register_handler)

    # –í—Ö—ñ–¥
    login_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–£–≤—ñ–π—Ç–∏$"), login)],
        states={
            LOGIN_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_login_email)],
            LOGIN_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, check_login)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(login_handler)

    # –ì–æ—Å—Ç—å–æ–≤–∏–π –≤—Ö—ñ–¥
    app.add_handler(MessageHandler(filters.Regex("^–£–≤—ñ–π—Ç–∏ —è–∫ –≥—ñ—Å—Ç—å$"), guest))

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –∫—É—Ä—Å—ñ–≤
    recommend_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó$"), recommend)],
        states={
            ASK_INTEREST: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_level)],
            ASK_LEVEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, show_courses)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(recommend_handler)

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫—É—Ä—Å—ñ–≤
    save_course_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üíù –ó–±–µ—Ä–µ–≥—Ç–∏ –∫—É—Ä—Å$"), save_course)],
        states={
            SAVE_COURSE_SELECTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_course_selection)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(save_course_handler)

    # –Ü–Ω—à—ñ –¥—ñ—ó
    app.add_handler(MessageHandler(filters.Regex("^üìÇ –ú–æ—ó –∫—É—Ä—Å–∏$"), view_saved_courses))
    app.add_handler(MessageHandler(filters.Regex("^üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ$"), get_users))

    feedback_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^‚úâÔ∏è –ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫$"), feedback_entry)],
        states={
            FEEDBACK: [MessageHandler(filters.TEXT & ~filters.COMMAND, feedback_save)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(feedback_handler)

    app.add_handler(MessageHandler(filters.Regex("^üì• –í—ñ–¥–≥—É–∫–∏$"), view_feedback))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    app.run_polling()

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É
if __name__ == "__main__":
    main()
